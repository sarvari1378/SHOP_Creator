name: Add Item to JSON

on:
  workflow_dispatch:
    inputs:
      title:
        description: 'Title of the item'
        required: true
        type: string
      english_description:
        description: 'Description in English (Single-line input, auto-formats)'
        required: true
        type: string
      persian_description:
        description: 'Description in Persian (Single-line input, auto-formats)'
        required: true
        type: string
      image:
        description: 'Image filename (from Images folder)'
        required: true
        type: string
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false
  
jobs:
  update_json:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch full history for pull/rebase

      - name: Get raw URL of selected image
        id: image_url
        run: |
          IMAGE_NAME="${{ github.event.inputs.image }}"
          IMAGE_RAW_URL="https://raw.githubusercontent.com/${{ github.repository }}/main/Images/${IMAGE_NAME}"
          echo "image_url=$IMAGE_RAW_URL" >> $GITHUB_ENV

      - name: Format descriptions and add item to data.json
        run: |
          ITEM_TITLE="${{ github.event.inputs.title }}"

          add_newline_before_words() {
            local input="$1"
            local words_to_add_newline=("Ring" "Silver" "Weight" "Type" "مديل" "نوع" "عيار" "الوزن")  # Add words here

            for word in "${words_to_add_newline[@]}"; do
              input=$(echo "$input" | sed "s/\b$word\b/\n$word/g")
            done

            echo "$input"
          }

          ITEM_DESC_EN=$(add_newline_before_words "${{ github.event.inputs.english_description }}")
          ITEM_DESC_FA=$(add_newline_before_words "${{ github.event.inputs.persian_description }}")
          ITEM_IMG="$image_url"

          DATA_FILE="Data.json"
          json_content=$(cat $DATA_FILE)

          new_item=$(
            jq -n --arg title "$ITEM_TITLE" \
                  --arg englishDescription "$ITEM_DESC_EN" \
                  --arg persianDescription "$ITEM_DESC_FA" \
                  --arg image "$ITEM_IMG" \
                  '{title: $title, englishDescription: $englishDescription, persianDescription: $persianDescription, image: $image}'
          )

          new_json=$(echo "$json_content" | jq ".items += [$new_item]")
          echo "$new_json" | jq '.' > $DATA_FILE

      - name: Commit and push changes with retry
        run: |
          # Configure Git for the Actions bot
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          git add Data.json
          # Create a local commit
          git commit -m "Added new item: ${{ github.event.inputs.title }}" || echo "No changes to commit"

          # Retry loop to handle race conditions
          for i in {1..5}
          do
            # Pull the latest changes from the remote, and rebase our local commit on top
            git pull origin main --rebase

            # Check if the pull/rebase was successful. 0 means success.
            if [ $? -eq 0 ]; then
              # If pull was successful, attempt to push
              echo "Attempt $i: Pull successful, attempting to push..."
              if git push; then
                echo "Success: Changes pushed on attempt $i."
                exit 0 # Exit the script with success
              else
                echo "Attempt $i: Push failed. Another process might have pushed. Retrying in 5 seconds..."
              fi
            else
              # If pull --rebase failed, it's a conflict. Abort the rebase and retry the whole process.
              echo "Attempt $i: Rebase conflict detected. Aborting rebase and retrying in 5 seconds..."
              git rebase --abort
            fi
            
            # Wait for a few seconds before the next attempt
            sleep 5
          done

          # If the loop finishes without a successful push, fail the workflow
          echo "Error: Failed to push changes after 5 attempts."
          exit 1
